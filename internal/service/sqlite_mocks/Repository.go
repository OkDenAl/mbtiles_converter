// Code generated by mockery v2.20.0. DO NOT EDIT.

package sqlite_mocks

import (
	context "context"

	entity "github.com/OkDenAl/mbtiles_converter/internal/entity"
	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// AddTile provides a mock function with given fields: ctx, point
func (_m *Repository) AddTile(ctx context.Context, point entity.MbtilesMapPoint) error {
	ret := _m.Called(ctx, point)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.MbtilesMapPoint) error); ok {
		r0 = rf(ctx, point)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddTilesBatch provides a mock function with given fields: ctx, mbtilesPoints
func (_m *Repository) AddTilesBatch(ctx context.Context, mbtilesPoints []entity.MbtilesMapPoint) error {
	ret := _m.Called(ctx, mbtilesPoints)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []entity.MbtilesMapPoint) error); ok {
		r0 = rf(ctx, mbtilesPoints)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateTables provides a mock function with given fields: ctx
func (_m *Repository) CreateTables(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FillMetadata provides a mock function with given fields: ctx, metadata
func (_m *Repository) FillMetadata(ctx context.Context, metadata entity.Metadata) error {
	ret := _m.Called(ctx, metadata)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.Metadata) error); ok {
		r0 = rf(ctx, metadata)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetTileData provides a mock function with given fields: ctx, tile
func (_m *Repository) GetTileData(ctx context.Context, tile entity.TileCoords) ([]byte, error) {
	ret := _m.Called(ctx, tile)

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.TileCoords) ([]byte, error)); ok {
		return rf(ctx, tile)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entity.TileCoords) []byte); ok {
		r0 = rf(ctx, tile)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, entity.TileCoords) error); ok {
		r1 = rf(ctx, tile)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTileData provides a mock function with given fields: ctx, point
func (_m *Repository) UpdateTileData(ctx context.Context, point entity.MbtilesMapPoint) error {
	ret := _m.Called(ctx, point)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.MbtilesMapPoint) error); ok {
		r0 = rf(ctx, point)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateTilesDataBatch provides a mock function with given fields: ctx, mbtilesPoints
func (_m *Repository) UpdateTilesDataBatch(ctx context.Context, mbtilesPoints []entity.MbtilesMapPoint) error {
	ret := _m.Called(ctx, mbtilesPoints)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []entity.MbtilesMapPoint) error); ok {
		r0 = rf(ctx, mbtilesPoints)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRepository(t mockConstructorTestingTNewRepository) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
